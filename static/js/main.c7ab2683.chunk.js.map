{"version":3,"sources":["components/logo/brain.jpg","components/logo/logo.js","components/imagelinkform/imagelinkform.js","components/facerecognition/facerecognition.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","options","max","style","height","width","paddingTop","alt","src","brain","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageUrl","box","id","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","value","state","models","predict","version","then","response","fetch","method","headers","body","JSON","stringify","user","json","count","Object","assign","entries","catch","err","console","log","name","email","joined","this","isSignedin","route","Component","particlesOptions","particles","number","density","enable","value_area","params","path","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c7ab2683.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.3639c502.jpg\";","import React from \"react\";\nimport Tilt from \"react-tilt\";\nimport \"./logo.css\";\nimport brain from \"./brain.jpg\";\n\nconst Logo = () => {\n  return (\n    <div className=\"ma4 mt0\">\n      <Tilt\n        className=\"Tilt br2 shadow-2\"\n        options={{ max: 55 }}\n        style={{ height: 150, width: 150 }}\n      >\n        <div className=\"Tilt-inner pa3\">\n          <img style={{ paddingTop: \"5px\" }} alt=\"logo\" src={brain} />{\" \"}\n        </div>\n      </Tilt>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\nimport \"./imagelinkform.css\";\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n  return (\n    <div>\n      <p className=\"f3\">\n        {\"This Magic Brain will detect faces in your pictures.\"}\n      </p>\n      <div className=\"center\">\n        <div className=\"form center pa4 br3 shadow-5\">\n          <input\n            className=\"f4 pa2 w-70 center\"\n            type=\"tex\"\n            onChange={onInputChange}\n          />\n          <button\n            className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-blue\"\n            onClick={onButtonSubmit}\n          >\n            Detect\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageLinkForm;\n","import React from \"react\";\nimport \"./facerecognition.css\";\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n  return (\n    <div className=\"center ma\">\n      <div className=\"absolute mt2\">\n        <img id=\"inputimage\" alt=\"\" src={imageUrl} width=\"500px\" heigh=\"auto\" />\n        <div\n          className=\"bounding-box\"\n          style={{\n            top: box.topRow,\n            right: box.rightCol,\n            bottom: box.bottomRow,\n            left: box.leftCol,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default FaceRecognition;\n","import React, { Component } from \"react\";\nimport Clarifai from \"clarifai\";\nimport ImageLinkForm from \"./components/imagelinkform/imagelinkform\";\n\nimport FaceRecognition from \"./components/facerecognition/facerecognition\";\nimport \"./App.css\";\nconst app = new Clarifai.App({\n  apiKey: \"0f68e4b17c4a49ad9ce1a1873f2911cf\",\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n      user: {\n        id: \"\",\n        name: \"\",\n        email: \"\",\n        entries: 0,\n        joined: \"\",\n      },\n    };\n  }\n\n  //face location calculation\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(\n        {\n          id: \"a403429f2ddf4b49b307e318f00e528b\",\n          version: \"34ce21a40cc24b6b96ffee54aabff139\",\n        },\n        this.state.input\n      )\n      .then((response) => {\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              id: this.state.user.id,\n            }),\n          })\n            .then((response) => response.json())\n            .then((count) => {\n              this.setState(Object.assign(this.state.user, { entries: count }));\n            });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    const { isSignedin, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          <ImageLinkForm\n            onInputChange={this.onInputChange}\n            onButtonSubmit={this.onButtonSubmit}\n          />\n          <FaceRecognition box={box} imageUrl={imageUrl} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Logo from \"./components/logo/logo\";\nimport Particles from \"react-particles-js\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport \"./App.css\";\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Particles className=\"particles\" params={particlesOptions} />\n\n      <div>\n        <Logo />\n      </div>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"tachyons\";\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}